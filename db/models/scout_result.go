package models

import (
	myErrors "github.com/andygello555/agem"
	"github.com/google/uuid"
	"github.com/pkg/errors"
	"gorm.io/gorm"
	"time"
)

// SetOrAddFunc represents a function that can be supplied to the ScoutState State cached field's SetOrAdd method for
// the Result field. For instance, to increment the DiscoveryStats.Developers field:
//
//	state.GetCachedField(StateType).SetOrAdd("Result", "DiscoveryStats", "Developers", SetOrAddInc.Func())
type SetOrAddFunc int

const (
	// SetOrAddInc returns a function to increment the field's value by 1.
	SetOrAddInc SetOrAddFunc = iota
	// SetOrAddAdd returns a function to add the field's value to the value specified as the first argument to
	// SetOrAddFunc.Func.
	SetOrAddAdd
)

// Func returns the function that should be used as the last argument to SetOrAdd. The provided arguments are used
// within the definitions for the functions for various reasons.
func (sora SetOrAddFunc) Func(args ...any) any {
	switch sora {
	case SetOrAddInc:
		return func(v int64) int64 { return v + 1 }
	case SetOrAddAdd:
		return func(v int64) int64 { return v + args[0].(int64) }
	default:
		return nil
	}
}

type DiscoveryUpdateSnapshotStats struct {
	// Developers is the number of Developers created when in the DiscoveryPhase, the number of Developers updated when
	// in the UpdatePhase, and the number of Developers that have partial snapshots in the SnapshotPhase.
	Developers int64
	// Games is the number of Game created when in the DiscoveryPhase, the number of Games updated when in the
	// UpdatePhase, and the number of Games within the GameIDs cached field in the SnapshotPhase.
	Games int64
	// TweetsConsumed is the number of Tweets successfully consumed from the Twitter API.
	TweetsConsumed int64
	// PostsConsumed is the number of Reddit posts successfully consumed from the Reddit API.
	PostsConsumed int64
	// TotalSnapshots is the total number of partial DeveloperSnapshot before merging for each developer.
	TotalSnapshots int64
	// SnapshotsCreated is the total number of DeveloperSnapshot created. Only applies for ScoutResult.SnapshotStats.
	SnapshotsCreated int64
}

type DisableEnableDeleteStats struct {
	// EnabledDevelopersBefore is the number of enabled developers before the phase.
	EnabledDevelopersBefore int64
	// DisabledDevelopersBefore is the number of disabled developers before the phase.
	DisabledDevelopersBefore int64
	// EnabledDevelopersAfter is the number of enabled developers after the phase.
	EnabledDevelopersAfter int64
	// DisabledDevelopersAfter is the number of enabled developers after the phase.
	DisabledDevelopersAfter int64
	// DeletedDevelopers is the number of developers that were deleted in the phase. Only applies for
	// ScoutResult.DeleteStats.
	DeletedDevelopers int64
	// TotalSampledDevelopers is the total number of developers that were sampled in the phase. Only applies for
	// ScoutResult.EnableStats and ScoutResult.DeleteStats.
	TotalSampledDevelopers int64
	// TotalFinishedSamples the number of Developer samples successfully processed in the phase. Only applies for
	// ScoutResult.EnableStats and ScoutResult.DeleteStats.
	TotalFinishedSamples int64
}

// Before sets the EnabledDevelopersBefore and DisabledDevelopersBefore fields using SQL queries. Call this before the
// Disable, Enable, and Delete Phase logic.
func (d *DisableEnableDeleteStats) Before(db *gorm.DB) error {
	return errors.Wrap(myErrors.MergeErrors(
		db.Model(&Developer{}).Where("NOT disabled").Count(&d.EnabledDevelopersBefore).Error,
		db.Model(&Developer{}).Where("disabled").Count(&d.DisabledDevelopersBefore).Error,
	), "could not get EnabledDevelopersBefore and/or DisabledDevelopersBefore")
}

// After sets the EnabledDevelopersAfter and DisabledDevelopersAfter fields using SQL queries. Call this after the
// Disable, Enable, and Delete Phase logic.
func (d *DisableEnableDeleteStats) After(db *gorm.DB) error {
	return errors.Wrap(myErrors.MergeErrors(
		db.Model(&Developer{}).Where("NOT disabled").Count(&d.EnabledDevelopersAfter).Error,
		db.Model(&Developer{}).Where("disabled").Count(&d.DisabledDevelopersAfter).Error,
	), "could not get EnabledDevelopersAfter and/or DisabledDevelopersBefore")
}

type MeasureStats struct {
	// SampledTrendingDevelopers is the number of Developer sampled to create the email.Measure email.
	SampledTrendingDevelopers int64
	// EmailSendTimeTaken is the time it took to send the email.Measure email.
	EmailSendTimeTaken time.Duration
	// EmailSize is the generated email.Measure email's size in bytes.
	EmailSize int64
}

type ScoutResult struct {
	// ID of this ScoutResult that is automatically generated by postgres.
	ID uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4()"`
	// CreatedAt is when this ScoutResult was created.
	CreatedAt time.Time
	// Started is when the Scout procedure was started.
	Started time.Time
	// DiscoveryStats is the stats for the DiscoveryPhase.
	DiscoveryStats *DiscoveryUpdateSnapshotStats `gorm:"embedded;embeddedPrefix:discovery_"`
	// UpdateStats is the stats for the UpdatePhase.
	UpdateStats *DiscoveryUpdateSnapshotStats `gorm:"embedded;embeddedPrefix:update_"`
	// SnapshotStats is the stats for the SnapshotPhase.
	SnapshotStats *DiscoveryUpdateSnapshotStats `gorm:"embedded;embeddedPrefix:snapshot_"`
	// DisableStats is the stats for the DisablePhase.
	DisableStats *DisableEnableDeleteStats `gorm:"embedded;embeddedPrefix:disable_"`
	// EnableStats is the stats for the EnablePhase.
	EnableStats *DisableEnableDeleteStats `gorm:"embedded;embeddedPrefix:enable_"`
	// DeleteStats is the stats for the DeletePhase.
	DeleteStats *DisableEnableDeleteStats `gorm:"embedded;embeddedPrefix:delete_"`
	// MeasureStats is the stats for the MeasurePhase.
	MeasureStats *MeasureStats `gorm:"embedded;embeddedPrefix:measure_"`
}
